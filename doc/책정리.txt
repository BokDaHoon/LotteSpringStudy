09.09
Class04 의존성 주입
 4.1 의존성 관리
  4.1.1 스프링의 의존성 관리 방법.
   # 스프링은 객체생성과 의존관계를 컨테이너가 자동으로 관리(IoC)
   # 다음 두가지 형태로 나타남
    - Dependency Lookup : 클라이언트가 컨테이너에서 생성한 객체를 검색하여 사용.
	- Dependency Injection (Setter Injection, Constructor Injection) : 컨테이너가
	
  4.1.2 의존성 관계
   # 의존성 관계란 객체와 객체의 결합관계 이다.
   # Sony Speaker 객체 생성코드를 삼성TV에 명시했으므로, 객체생성을 2번이나하고, 만약 딴스피커를 쓰면 volume up down 을 두번고쳐줘야한다. 의존성이 너무 강하다.
 
 4.2 생성자 의존성 이용하기
  #XML에 애플스피커 만들고 클래스 명시하고 그런거함.
  #매개변수로 스피커 받고 생성자에 this.speaker = spker 넣어줌
 
 4.3 Setter 인젝션 기본
  4.3.1 XML에서 키워드를 constructor-arg 이것 쓰는게아니라 <property> 엘레먼트사용함 
  4.3.2 P 네임스페이스 사용하기 p 네임스페이스는 네임스페이스에 대한 별도의 schemaLocation 이없다
  
  
09.13 
Class05 어노테이션 기반설정
 5.1 대부분 프레임워크가 XML 설정이 중요함, 그래서 사람들은 프레임워크 사용을 꺼리기도함. 스프링은 어노테이션 기반으로 바꿈
  5.1.1 Context 네임스페이스 추가.
   # 어노테이션 설정을 추가하려면 루트엘리먼트인 <Beans>에 context 관련 네임스페이스와 스키마 문서의 위치를 등록해야함.
    (P 태그 추가할때처럼 context 추가>
  5.1.2 컴포넌트 스캔 설정.
   #애플리케이션에서 사용할 객체들을 <bean> 등록 없이 사용하려면 컴포넌트스캔에 정의하면됨. 
    @component가 설정된 클래스들을 자동으로 객체생성
  5.1.3 @Component
   #context component 스캔을 설정 했다면, 이제 bean에 클래스를 등록 할 필요가 없다. 어노테이션만 설정해줌됨
   #생성한 객체를  tv = factory.getBean("tv"); 이런식으로 변수에 할당해 주려면 @component("tv") 이런식으로 tv 명시.
   #만약 속성 미지정시 LgTV 객체를 요청하려면 lgTV 라고 요청하면 됨.
   
  5.2의존성 주입 설정
   5.2.1 의존성 주입 어노테이션
   # 스프링에서 의존성을 주입하는 것은 @Autowired,@Qualifire, @Inject, @Resource 가있다.
   #@Autowired : 주로 변수위에 선언하며, 해당타입 객체 알아서 찾아 줌.
   #@Qualifire : 특정 객체의 이름을 이용하여 의존성 주입할 때 사용.
   #@Inject : Autowired와 동일한 기능
   #@Resource : @autowired 와 @qualifire 를 결합한 어노테이션.
   
   5.2.2 @Autowired
   # 생성자, 메소드, 멤버변수 위에 모두 사용 가능.
   # 대부분 멤버변수 위에서 사용.
   # 스프링 컨테이너는 멤버변수 위에 붙은 @Autowired 확인 순간 해당 변수타입체크
   # NoSuchBeanDefinitionExceptio 은 대상 객체가 메모리에 없다는 뜻.
   
   5.2.3 @Qualifire
    # 문제는 의존성 주입대상이 되는 Speaker 타입 객체가 두 개 이상일 때 발생.
	# 만약 SonySPekaer 와 AppleSpeaker 두개가 메모리에 올라와 있다면?
	# 변수가 speaker 타입이므로 또한 두 스피커가 speaker를 상속받으므로 애매해짐.
	# NoUniqueBeanDefinitionException 이라는 오류가뜸
	# 아아 @Qualifire 를 쓰고 그 위에 @Autowired 도 써줘야 했음

   5.2.4 @Resource 
   #이것 두개를 합친게 resource 이다 @Resource(name="") 이런식으로 써주면됨	
	
  5.3 추가 어노테이션
   #모든 클래스에 #component만 할당한다면 어떤 클래스가 역할을 수행하는지 알기 어렵다
   그래서 스프링에서는 #component를 상속한 3가지 어노테이션을 추가로 구성한다.
   5.3.1 @Service 비즈니스 로직을 처리하는 Service 클래스
   5.3.2 @Repository 데이터 베이스 연동을 처리하는 DAO 클랫
   5.3.3 @Controller 사용자 요청을 제어하는 Controller 클래스
   #단순히 클래스 분류 이외에도 각 모듈에 맞는 예외처리등을 제공하는데 나중에 알아보기로하자.

   
Class 06 비즈니스 컴포넌트 실습
class 07 실습


-----------------------------------------DAY2--------------------------------------

Class01 AOP
 낮은 결합도 높은 응집도 = > AOP는 응집도와 관련된 기능.
 1.1 AOP 이해하기
  # AOP는 부가적인 공통코드(로깅,엑셉션,트랜잭션 등) 을 효율적으로 관리해 주는 것.
  # 관심 분리 SOC(Separation of Concerns) 횡단관심 (Crosscutting Concerns) 가 핵심!!
  # p147 처럼 작성된 프로그램은 결합도가 BoardServiceImpl 클래스와 LogAdvice 객체의 결합도가 너무강함. 만약 PrintLog의 시그니쳐가 변한다면 대처 할 수가 없음.
  # 결론: 공통모듈의 해당하는 Advice 클래스와 호출하는 메소드가 비즈니스 메소드에 있다면, 핵심관심과 횡단관심을 완벽히 분리 할 수없다. AOP는 이런 OOP의 한계를 극복시켜줌
  
 1.2AOP 시작하기

Class02 AOP 용어 및 기본 설정
 2.1 AOP 용어 정리
  2.1.1 Joinpoint
   #클라이언트가 호출 하는 모든 비즈니스 메소드. Impl의 모든 메소드를 조인포인트 라고 생각하셈.
    조인포인트를 포인트 컷 대상, 또는 포인트컷 후보 라고도한다.
  2.1.2 PointCut
   #클라이언트가 호출하는 모든 비즈니스 메소드가 조인포인트라면 포인트컷은 필터링 된 조인포인트.
    필터링 하는법은 (p.159에 expression 쓰는법 참조)
  2.1.3 Advice
   # 횡단 관심에 해당하는 공통기능의 코드
    ex)트랜잭션 관리기능의 어드바이스 메소드가 있다. 커밋 롤백은 비즈니스로직 처리전에는 의미가없다.
	ex)로그 어드바이스 (메소드의 묶음을 어드바이스라고 하는듯)
  2.1.4 Weaving
   # 포인트컷으로 지정한 색심관심 메소드가 호출 될때, 어드바이스에 해당하는 횡단 관심 메소드가 삽입되는 과정.
   # 크게 컴파일타임 위빙, 로딩타임 위빙, 런타임 위빙 방식이 있지만 스프링에서는 런타임방식 위빙만.
  2.1.5 Aspect or Advicesor
   #AOP의 약자에서 알 수 있듯이 AOP의 핵심은 Aspect 이다. 애스팩트는 포인트 컷과 어드바이스의 결합이다.
   #어떤 포인트컷에서 어떤 어드바이스 메소드가 실행될찌 결정한다.   
   #보통 aop:aspect 엘리먼트를 사용하지만, 트랜잭션 설정시에는 aop:advisor를 사용한다.
   (블로그 정리시 163, 164p 참고 할것).
  
  2.2 AOP 엘리먼트
   2.2.1 <aop:config> 엘리먼트
    #aop내에서 루트엘리먼트 이다. 하위로 <aop:pointcut> <aop:aspect> 엘리먼트가 위치할 수 있다.
	 (165p 포함관계 표현)

   2.2.2 <aop:pointcut> 엘리먼트
    #이 엘리먼트는 포인트컷을 지정하기위해 사용한다.
	
   2.2.3 <aop:aspect> 엘리먼트
    # 에스펙트는 이 엘리먼트로 설정한다. 애스펙트를 어떻게 설정하느냐에따라 위빙 결과가 달라지므로, AOP에서 가장 중요한 설정이다. (p.166 한번참고)
   2.2.4 <aop:advisor> 엘리먼트
    #에스펙트와 같은 기능을 하지만, 어드바이스 객체의 아이디를 모르거나, 메소드 이름을 확인 할 수 없을때는 aspect를 설정 할 수 없다. 핵심은 트랜잭션 관리 어드바이스 설정인데, 문제는 어드바이스의 메소드 확인 불가능. 이럴땐 <aop:advisor> 엘리먼트를 쓴다.